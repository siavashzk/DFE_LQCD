package lqcd;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;

public class LQCDEngineParameters extends EngineParameters {

	public LQCDEngineParameters(String[] args) {
		super(args);
	}

	private static final String s_LX         = "LX";
	private static final String s_LY         = "LY";
	private static final String s_LZ         = "LZ";
	private static final String s_T          = "T";
	private static final String s_numPipes   = "P";
	private static final String s_loopOffset = "LOOP_OFFSET";
	private static final String s_volume     = "VOLUME";
	private static final String s_frequency  = "frequency";
	private static final String s_effort     = "buildEffort";
	private static final String s_spCmdSize  = "spCmdSize";
	private static final String s_gCmdSize   = "GCmdSize";

	@Override
	protected void declarations() {
		declareParam(s_T,          DataType.INT, 8);
		declareParam(s_LZ,         DataType.INT, 8);
		declareParam(s_LY,         DataType.INT, 8);
		declareParam(s_LX,         DataType.INT, 16);
		declareParam(s_numPipes,   DataType.INT, 2);
		declareParam(s_loopOffset, DataType.INT, 16); // should divide LX*LY/2
		declareParam(s_spCmdSize,  DataType.INT, 128);  // should divide LX*LY*LZ/2*24*4  /384
		declareParam(s_gCmdSize,   DataType.INT, 128);  // should divide LX*LY*LZ/2*18*4*8/384
		declareParam(s_volume,     DataType.INT, 256);

		declareParam(s_frequency,  DataType.INT, 200);
		declareParam(s_effort,     Effort.class, Effort.HIGH);

	}

	@Override
	protected void deriveParameters() {
		deriveParam(s_volume, getLX() * getLY() * getLZ() * getT() );
	}
//
//	@Override
//	protected void validate() {
//		if (getStreamFrequency() <= 0)
//			throw new IllegalArgumentException("Stream frequency should be > 0.");
//	}
//
	public int getLX(){
		return getParam(s_LX);
	}

	public int getLY(){
		return getParam(s_LY);
	}

	public int getLZ(){
		return getParam(s_LZ);
	}

	public int getT(){
		return getParam(s_T);
	}

	public int getNumPipes(){
		return getParam(s_numPipes);
	}

	public int getLoopOffset(){
		return getParam(s_loopOffset);
	}

	public int getVolume(){
		return getParam(s_volume);
	}

	public int getSpCmdSize(){
		return getParam(s_spCmdSize);
	}

	public int getGCmdSize(){
		return getParam(s_gCmdSize);
	}

	public int getFreq(){
		return getParam(s_frequency);
	}

	public int getEffort(){
		return getParam(s_effort);
	}

	@Override
	public String getBuildName() {
		return getMaxFileName() + "_" + getTarget() +
		       "_" + getT() + "_" + getLX() + "_" +
		       getLY() + "_" + getLZ();
	}
}
