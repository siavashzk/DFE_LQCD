package lqcd;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxjlibs.io.aspectchange.AspectChangeIO;

class LQCDKernel extends Kernel {

	private final int LMEM_BURST = 384 * 8; // in bits

	protected LQCDKernel(
			KernelParameters parameters,
			int T,
			int LX,
			int LY,
			int LZ,
			int numPipes,
			int loopOffset,
			boolean passGauge
			)
	{

		super(parameters);

		LQCDConstants constants = new LQCDConstants(this, LX, LY, LZ, T, numPipes, loopOffset);

		optimization.pushPipeliningFactor(0.5);

		stream.suppressOffsetVectorWarnings();
		AspectChangeIO acio = new AspectChangeIO(this);

		//Input and output enables are only instantiated here, they are later connected to dslash operator
		DFEVar inputEnableSpinor0 = dfeBool().newInstance(this);
		DFEVar inputEnableSpinor1 = dfeBool().newInstance(this);
		DFEVar inputEnableGauge   = dfeBool().newInstance(this);
		DFEVar outputEnableSpinor = dfeBool().newInstance(this);

		//acio does
		DFEVector<DFEComplex> spinor_in0 = acio.input(
				parameters.getName()+"_spinor_in",
				LQCDConstants.getVectoredSpinorType(),
				LMEM_BURST,
				inputEnableSpinor0
				);
		DFEVector<DFEComplex> spinor_in1 = acio.input(
				parameters.getName()+"_p_spinor_in",
				LQCDConstants.getVectoredSpinorType(),
				LMEM_BURST,
				inputEnableSpinor1
				);
		DFEVector<DFEComplex> gauge_in = acio.input(
				parameters.getName()+"_gauge",
				LQCDConstants.getVectoredSu3Type(numPipes),
				LMEM_BURST,
				inputEnableGauge );

		// Inputs are cast as structured data (spinors and gauges)
		DFESpinor k = new DFESpinor(constants, spinor_in0);
		DFESpinor p = new DFESpinor(constants, spinor_in1);
		DFESu3 gauges[] = new DFESu3[numPipes/2];
		for (int i = 0; i < numPipes/2 ; i++ ) {
			gauges[i] = new DFESu3(constants, gauge_in, i);
		}

		// The dslash operator is defined here
		Dslash dslash = new Dslash(constants, k, p, gauges);
		inputEnableSpinor0 <== dslash.getInputEnableSpinorK();
		inputEnableSpinor1 <== dslash.getInputEnableSpinorP();
		inputEnableGauge   <== dslash.getInputEnableGauge();
		outputEnableSpinor <== dslash.getOutputEnableSpinor();

		DFEVector<DFEComplex> spinor_out = dslash.getOutput().convertToDFEVector();

		acio.output(
				parameters.getName()+"_spinor_out",
				spinor_out,
				384*8,
				outputEnableSpinor
				);

	}

}
