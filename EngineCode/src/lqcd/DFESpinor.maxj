package lqcd;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

/**
 * This class represents a 4x3 spinor matrix and
 * provides methods for a few arithmetic operations on spinors.
 * @author Siavash Zangeneh
 *
 */
public class DFESpinor extends KernelLib {

	/**
	 * 4 su3Vectors, each su3vector is a 3x1 vector
	 */
	public DFESu3Vector s0, s1, s2, s3;


	private final LQCDConstants m_constants;

	/**
	 * Constructor without instantiation of the DFE variables
	 * @param constants holds information about the system such as arithmetic format
	 */
	protected DFESpinor(LQCDConstants constants) {
		super(constants.getKernel());
		m_constants = constants;
	}

	/**
	 * Constructor with data initialization
	 * @param constants holds information about the system such as arithmetic format
	 * @param in a vector of size 12, holding initial value of the spinor
	 */
	protected DFESpinor(LQCDConstants constants, DFEVector<DFEComplex> in) {
		super(constants.getKernel());
		m_constants = constants;
		s0 = new DFESu3Vector (m_constants);
		s1 = new DFESu3Vector (m_constants);
		s2 = new DFESu3Vector (m_constants);
		s3 = new DFESu3Vector (m_constants);

		s0.c0 = in[0].cast(LQCDConstants.complexTypeCompute);
		s0.c1 = in[1].cast(LQCDConstants.complexTypeCompute);;
		s0.c2 = in[2].cast(LQCDConstants.complexTypeCompute);;

		s1.c0 = in[3].cast(LQCDConstants.complexTypeCompute);;
		s1.c1 = in[4].cast(LQCDConstants.complexTypeCompute);;
		s1.c2 = in[5].cast(LQCDConstants.complexTypeCompute);;

		s2.c0 = in[6].cast(LQCDConstants.complexTypeCompute);;
		s2.c1 = in[7].cast(LQCDConstants.complexTypeCompute);;
		s2.c2 = in[8].cast(LQCDConstants.complexTypeCompute);;

		s3.c0 = in[9].cast(LQCDConstants.complexTypeCompute);;
		s3.c1 = in[10].cast(LQCDConstants.complexTypeCompute);;
		s3.c2 = in[11].cast(LQCDConstants.complexTypeCompute);;

	}

	/**
	 * Instantiates the spinor elements, without connecting to actual nodes
	 */
	public void newInstant() {
		s0 = new DFESu3Vector (m_constants);
		s1 = new DFESu3Vector (m_constants);
		s2 = new DFESu3Vector (m_constants);
		s3 = new DFESu3Vector (m_constants);
	}

	/**
	 * Instantiates the spinor with all zero elements
	 */
	public void newZeroInstant() {
		s0 = new DFESu3Vector (m_constants);
		s1 = new DFESu3Vector (m_constants);
		s2 = new DFESu3Vector (m_constants);
		s3 = new DFESu3Vector (m_constants);

		s0.setZero();
		s1.setZero();
		s2.setZero();
		s3.setZero();
	}

	/**
	 * Works the same as streamoffset for DFEVars, except that it is defined for DFESpinors
	 * @param offset integer offset
	 * @return the object holding the offsetted spinor
	 */
	public DFESpinor streamoffset(int offset) {
		DFESpinor temp = new DFESpinor(m_constants);

		temp.s0 = s0.streamoffset(offset);
		temp.s1 = s1.streamoffset(offset);
		temp.s2 = s2.streamoffset(offset);
		temp.s3 = s3.streamoffset(offset);

		return temp;
	}

	/**
	 * Adds this spinor with another spinor and returns the result as a new spinor object
	 * @param a the addend spinor
	 * @return the sum spinor
	 */
	public DFESpinor add (DFESpinor a) {
		DFESpinor temp = new DFESpinor(m_constants);
		temp.s0 = s0 + a.s0;
		temp.s1 = s1 + a.s1;
		temp.s2 = s2 + a.s2;
		temp.s3 = s3 + a.s3;
		return temp;
	}

	/**
	 * Multiply each element of this spinor with a DFEVar and returns the result as a new spinor object
	 * @param a the multiplicand
	 * @return the result of Spinor-number multiply
	 */
	public DFESpinor mul (DFEVar a) {
		DFESpinor temp = new DFESpinor(m_constants);
		temp.s0 = s0 * a;
		temp.s1 = s1 * a;
		temp.s2 = s2 * a;
		temp.s3 = s3 * a;
		return temp;
	}

	/**
	 * Negate each element of this spinor
	 * @return the negation of the spinor
	 */
	public DFESpinor neg () {
		DFESpinor temp = new DFESpinor(m_constants);
		temp.s0 = -s0;
		temp.s1 = -s1;
		temp.s2 = -s2;
		temp.s3 = -s3;
		return temp;
	}

	/**
	 * Connects each element of this spinor with the element of an input spinor
	 * @param a the input spinor to connect with
	 */
	public void connect (DFESpinor a) {
		s0 <== a.s0;
		s1 <== a.s1;
		s2 <== a.s2;
		s3 <== a.s3;
	}

	/**
	 * converts the spinor to a vector of complex numbers, suitable for output ports
	 * @return the vectored spinor
	 */
	public DFEVector<DFEComplex> convertToDFEVector () {
		DFEVector<DFEComplex> result =
			LQCDConstants.getVectoredSpinorType().newInstance(m_constants.getKernel());

		result[0]  <== s0.c0.cast(LQCDConstants.complexTypeStore);
		result[1]  <== s0.c1.cast(LQCDConstants.complexTypeStore);
		result[2]  <== s0.c2.cast(LQCDConstants.complexTypeStore);
		result[3]  <== s1.c0.cast(LQCDConstants.complexTypeStore);
		result[4]  <== s1.c1.cast(LQCDConstants.complexTypeStore);
		result[5]  <== s1.c2.cast(LQCDConstants.complexTypeStore);
		result[6]  <== s2.c0.cast(LQCDConstants.complexTypeStore);
		result[7]  <== s2.c1.cast(LQCDConstants.complexTypeStore);
		result[8]  <== s2.c2.cast(LQCDConstants.complexTypeStore);
		result[9]  <== s3.c0.cast(LQCDConstants.complexTypeStore);
		result[10] <== s3.c1.cast(LQCDConstants.complexTypeStore);
		result[11] <== s3.c2.cast(LQCDConstants.complexTypeStore);

		return result;
	}
}
