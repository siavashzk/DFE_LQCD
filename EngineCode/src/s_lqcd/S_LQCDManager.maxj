package s_lqcd;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Demux;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.Mux;

public class S_LQCDManager extends CustomManager {


	public S_LQCDManager(S_LQCDEngineParameters engineParameters) {
		super(engineParameters);

		int T  = engineParameters.getT();
		int LX = engineParameters.getLX();
		int LY = engineParameters.getLY();
		int LZ = engineParameters.getLZ();

		int XYZ = LX*LY*LZ / 2;

		KernelBlock diracKernel = addKernel(
				new S_LQCDKernel(
						makeKernelParameters("diracKernel"),
						T,
						LX,
						LY,
						LZ,
						engineParameters.getNumPipes(),
						engineParameters.getLoopOffset(),
						1,
						false
				)
		);
		/*KernelBlock sub1block = addKernel(
				new S_LQCDKernel(
						makeKernelParameters(kernel_names[1]),
						T,
						LX,
						LY,
						LZ,
						engineParameters.getNumPipes(),
						engineParameters.getLoopOffset(),
						S_LQCDKernel.Mode.SUB,
						S_LQCDKernel.EO.ODDEVEN,
						1,
						false
				)
		);*/


		/*KernelBlock times2block = addKernel(
				new S_LQCDKernel(
						makeKernelParameters(kernel_names[2]),
						engineParameters.getL()+2,
						engineParameters.getT()+2,
						S_LQCDKernel.Mode.TIMES,
						S_LQCDKernel.EO.ODDEVEN,
						true
				)
		);
		KernelBlock sub2block = addKernel(
				new S_LQCDKernel(
						makeKernelParameters(kernel_names[3]),
						engineParameters.getL(),
						engineParameters.getT(),
						S_LQCDKernel.Mode.SUB,
						S_LQCDKernel.EO.EVENODD,
						false
				)
		);*/

		AddressGeneratorGauge gWriteCmdKernel = new AddressGeneratorGauge(
				makeKernelParameters("gWriteCmdKernel"),
				T, XYZ, 0,
				"gWriteCmdOut");
		DFELink gtoLmem = addStreamToOnCardMemory("gtoLmem", addKernel(gWriteCmdKernel).getOutput("gWriteCmdOut"));
		gtoLmem <== addStreamFromCPU("gauge_in");

		AddressGeneratorGauge gReadCmdKernel = new AddressGeneratorGauge(
				makeKernelParameters("gReadCmdKernel"),
				T, XYZ, 1,
				"gReadCmdOut");
		DFELink gfromLmem = addStreamFromOnCardMemory("gfromlmem", addKernel(gReadCmdKernel).getOutput("gReadCmdOut"));

		AddressGeneratorSpinor spWriteCmdKernel = new AddressGeneratorSpinor(
				makeKernelParameters("spWriteCmdKernel"),
				T, XYZ,
				"spWriteCmdOut");
		DFELink sptoLmem = addStreamToOnCardMemory("sptoLmem", addKernel(spWriteCmdKernel).getOutput("spWriteCmdOut"));

		AddressGeneratorSpinor spReadCmdKernel0 = new AddressGeneratorSpinor(
				makeKernelParameters("spReadCmdKernel0"),
				T, XYZ,
				"spReadCmdOut0");
		DFELink spfromLmem0 = addStreamFromOnCardMemory("spfromlmem0", addKernel(spReadCmdKernel0).getOutput("spReadCmdOut0"));

		AddressGeneratorSpinor spReadCmdKernel1 = new AddressGeneratorSpinor(
				makeKernelParameters("spReadCmdKernel1"),
				T, XYZ,
				"spReadCmdOut1");
		DFELink spfromLmem1 = addStreamFromOnCardMemory("spfromlmem1", addKernel(spReadCmdKernel1).getOutput("spReadCmdOut1"));

		/*for (String inputName: times1block.getAllInputs())
			times1block.getInput(inputName).connect(addStreamFromCPU(inputName));*/

		diracKernel.getInput("diracKernel_gauge")     <== gfromLmem;

		Demux spfromLmem0Demux = demux("spfromLmem0Demux");
		spfromLmem0Demux.getInput() <== spfromLmem0;
		diracKernel.getInput("diracKernel_spinor_in") <== spfromLmem0Demux.addOutput("spfromLmem0Demux_toKernel");
		addStreamToCPU("spinor_out")                   <== spfromLmem0Demux.addOutput("spfromLmem0Demux_toCPU");

		diracKernel.getInput("diracKernel_p_spinor_in") <== spfromLmem1;

		Mux sptoLmemMux = mux("sptoLmemMux");
		sptoLmemMux.addInput("sptoLmemMux_fromCPU") <== addStreamFromCPU("spinor_in");
		sptoLmemMux.addInput("sptoLmemMux_fromKernel") <== diracKernel.getOutput("diracKernel_spinor_out");

		sptoLmem <== sptoLmemMux.getOutput();



		/*DFELink x1 = times1block.getOutput("diracKernel_spinor_out");
		_CustomManagers.setStreamBufferSpaceRequirement(x1, 1024*64*768);
		sub1block.getInput("sub1kernel_spinor_in") <== x1;

		DFELink x2 = times1block.getOutput("diracKernel_p_spinor_out");
		_CustomManagers.setStreamBufferSpaceRequirement(x2, 1024*64*768);
		sub1block.getInput("sub1kernel_p_spinor_in") <== x2;*/

		//sub1block.getInput("sub1kernel_p_spinor_in") <== addStreamFromCPU("sub1kernel_p_spinor_in");

		//sub1block.getInput("sub1kernel_gauge") <== gfromLmem;
		//sub1block.getInput("sub1kernel_gauge") <== addStreamFromCPU("sub1kernel_gauge");
		//sub1block.getInput("sub1kernel_gauge1") <== addStreamFromCPU("sub1kernel_gauge1");

		/*DFELink x1 = times1block.getOutput("diracKernel_spinor_out");
		DFELink x2 = times1block.getOutput("diracKernel_p_spinor_out");
		DFELink x3 = times1block.getOutput("diracKernel_gauge1_out");
		DFELink x4 = times1block.getOutput("diracKernel_gauge0_out");

		_CustomManagers.setStreamBufferSpaceRequirement(x1, 1536*2048);
		_CustomManagers.setStreamBufferSpaceRequirement(x2, 1536*2048);
		_CustomManagers.setStreamBufferSpaceRequirement(x3, 4608*2048);
		_CustomManagers.setStreamBufferSpaceRequirement(x4, 4608*2048);

		sub1block.getInput("sub1kernel_spinor_in") <== x1;
		sub1block.getInput("sub1kernel_p_spinor_in") <== x2;
		sub1block.getInput("sub1kernel_gauge0") <== x3;
		sub1block.getInput("sub1kernel_gauge1") <== x4;*/


		setParameter("quartus_map.ram_usage", "48000");
		config.setAllowNonMultipleTransitions(true);

		/*for (String outputName: times1block.getAllOutputs())
			addStreamToCPU(outputName).connect(times1block.getOutput(outputName));*/

		/*DebugLevel MyDebugLevel = new DebugLevel();
		MyDebugLevel.setHasStreamStatus(true);
		debug.setDebugLevel(MyDebugLevel);*/

		configBuild(engineParameters );

		addMaxFileConstant("T", engineParameters.getT());
		addMaxFileConstant("LX", engineParameters.getLX());
		addMaxFileConstant("LY", engineParameters.getLY());
		addMaxFileConstant("LZ", engineParameters.getLZ());
		addMaxFileConstant("numPipes", engineParameters.getNumPipes());
		addMaxFileConstant("loopOffset", engineParameters.getLoopOffset());
	}

	private void configBuild(S_LQCDEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) {
		S_LQCDManager manager = new S_LQCDManager(new S_LQCDEngineParameters(args));
		manager.build();
	}
}
